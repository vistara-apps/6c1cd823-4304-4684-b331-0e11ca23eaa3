'use client';

import { useState, useRef } from 'react';
import { Button } from '@/components/ui/Button';
import { Card } from '@/components/ui/Card';
import { Mic, Square, Play, Pause } from 'lucide-react';
import { Recording } from '@/lib/types';
import { getCurrentLocation, formatTimestamp } from '@/lib/utils';

interface RecordButtonProps {
  onRecordingComplete: (recording: Recording) => void;
}

export function RecordButton({ onRecordingComplete }: RecordButtonProps) {
  const [isRecording, setIsRecording] = useState(false);
  const [recordingTime, setRecordingTime] = useState(0);
  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null);
  const [recordedBlob, setRecordedBlob] = useState<Blob | null>(null);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: true, 
        video: true 
      });
      
      const recorder = new MediaRecorder(stream);
      const chunks: Blob[] = [];
      
      recorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          chunks.push(event.data);
        }
      };
      
      recorder.onstop = async () => {
        const blob = new Blob(chunks, { type: 'video/webm' });
        setRecordedBlob(blob);
        
        const location = await getCurrentLocation();
        const recording: Recording = {
          recordingId: `rec_${Date.now()}`,
          userId: 'current_user', // In production, get from auth
          timestamp: new Date(),
          location: location || undefined,
          duration: recordingTime,
          notes: ''
        };
        
        onRecordingComplete(recording);
        
        // Stop all tracks
        stream.getTracks().forEach(track => track.stop());
      };
      
      recorder.start();
      setMediaRecorder(recorder);
      setIsRecording(true);
      
      // Start timer
      intervalRef.current = setInterval(() => {
        setRecordingTime(prev => prev + 1);
      }, 1000);
      
    } catch (error) {
      console.error('Error starting recording:', error);
      alert('Unable to access camera/microphone. Please check permissions.');
    }
  };

  const stopRecording = () => {
    if (mediaRecorder && mediaRecorder.state === 'recording') {
      mediaRecorder.stop();
      setIsRecording(false);
      
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <Card className="text-center">
      <div className="mb-4">
        <h3 className="text-xl font-semibold text-text-primary mb-2">
          {isRecording ? 'Recording...' : 'One Tap Record'}
        </h3>
        <p className="text-text-secondary text-sm">
          {isRecording 
            ? `Recording time: ${formatTime(recordingTime)}`
            : 'Capture audio/video evidence instantly'
          }
        </p>
      </div>
      
      <div className="flex justify-center mb-4">
        {!isRecording ? (
          <Button
            variant="accent"
            size="lg"
            onClick={startRecording}
            className="w-24 h-24 rounded-full flex items-center justify-center"
          >
            <Mic className="w-8 h-8" />
          </Button>
        ) : (
          <Button
            variant="secondary"
            size="lg"
            onClick={stopRecording}
            className="w-24 h-24 rounded-full flex items-center justify-center animate-pulse-record bg-red-600 hover:bg-red-700"
          >
            <Square className="w-8 h-8" />
          </Button>
        )}
      </div>
      
      <div className="text-xs text-text-secondary">
        <p>Location: {isRecording ? 'Capturing...' : 'One Tap Session'}</p>
        <p>Generated by: Bailiwick Guides</p>
      </div>
    </Card>
  );
}
