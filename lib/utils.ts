import { type ClassValue, clsx } from 'clsx';

export function cn(...inputs: ClassValue[]) {
  return clsx(inputs);
}

export function formatTimestamp(date: Date): string {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  }).format(date);
}

export function generateShareableUrl(cardId: string): string {
  return `${window.location.origin}/share/${cardId}`;
}

export async function getCurrentLocation(): Promise<{latitude: number, longitude: number} | null> {
  return new Promise((resolve) => {
    if (!navigator.geolocation) {
      resolve(null);
      return;
    }

    navigator.geolocation.getCurrentPosition(
      (position) => {
        resolve({
          latitude: position.coords.latitude,
          longitude: position.coords.longitude,
        });
      },
      () => {
        resolve(null);
      }
    );
  });
}

export function detectStateFromLocation(lat: number, lng: number): string {
  // Simplified state detection - in production, use a proper geocoding service
  // This is a basic implementation for demo purposes
  if (lat >= 32.5 && lat <= 42 && lng >= -124 && lng <= -114) return 'CA';
  if (lat >= 25.8 && lat <= 31 && lng >= -87 && lng <= -80) return 'FL';
  if (lat >= 40.5 && lat <= 45.0 && lng >= -79.8 && lng <= -71.8) return 'NY';
  if (lat >= 25.8 && lat <= 36.5 && lng >= -106.6 && lng <= -93.5) return 'TX';
  
  return 'CA'; // Default fallback
}

export function generateIncidentSummary(
  location: {latitude: number, longitude: number} | null,
  timestamp: Date,
  notes?: string
): string {
  const locationStr = location 
    ? `Location: ${location.latitude.toFixed(4)}, ${location.longitude.toFixed(4)}`
    : 'Location: Not available';
  
  const timeStr = formatTimestamp(timestamp);
  const notesStr = notes ? `\nNotes: ${notes}` : '';
  
  return `Incident Report
Time: ${timeStr}
${locationStr}${notesStr}

Generated by Bailiwick Guides`;
}

export function formatDuration(seconds: number): string {
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;
  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
}

export async function copyToClipboard(text: string): Promise<boolean> {
  try {
    if (navigator.clipboard && window.isSecureContext) {
      await navigator.clipboard.writeText(text);
      return true;
    } else {
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = text;
      textArea.style.position = 'fixed';
      textArea.style.left = '-999999px';
      textArea.style.top = '-999999px';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      const result = document.execCommand('copy');
      textArea.remove();
      return result;
    }
  } catch (error) {
    console.error('Failed to copy to clipboard:', error);
    return false;
  }
}
