'use client';

import { useState, useEffect } from 'react';
import { AppShell } from '@/components/layout/AppShell';
import { StateSelector } from '@/components/features/StateSelector';
import { GuideCard } from '@/components/features/GuideCard';
import { RecordButton } from '@/components/features/RecordButton';
import { GuideViewer } from '@/components/features/GuideViewer';
import { ShareableCard } from '@/components/features/ShareableCard';
import { Card } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import { StateGuide, Recording, ShareableCard as ShareableCardType } from '@/lib/types';
import { SAMPLE_GUIDES, GUIDE_CATEGORIES } from '@/lib/constants';
import { getCurrentLocation, detectStateFromLocation, generateIncidentSummary, generateShareableUrl } from '@/lib/utils';
import { useMiniKit } from '@coinbase/onchainkit/minikit';

export default function HomePage() {
  const [selectedState, setSelectedState] = useState('CA');
  const [availableGuides, setAvailableGuides] = useState<StateGuide[]>(SAMPLE_GUIDES);
  const [selectedGuide, setSelectedGuide] = useState<StateGuide | null>(null);
  const [shareableCard, setShareableCard] = useState<ShareableCardType | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  
  const { setFrameReady } = useMiniKit();

  useEffect(() => {
    setFrameReady();
  }, [setFrameReady]);

  const handleDetectLocation = async () => {
    setIsLoading(true);
    try {
      const location = await getCurrentLocation();
      if (location) {
        const detectedState = detectStateFromLocation(location.latitude, location.longitude);
        setSelectedState(detectedState);
      } else {
        alert('Unable to detect location. Please select your state manually.');
      }
    } catch (error) {
      console.error('Location detection failed:', error);
      alert('Location detection failed. Please select your state manually.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleStateSelect = (stateCode: string) => {
    setSelectedState(stateCode);
    // In production, fetch guides for the selected state
    setAvailableGuides(SAMPLE_GUIDES.filter(guide => guide.stateCode === stateCode));
  };

  const handleViewGuide = (guide: StateGuide) => {
    setSelectedGuide(guide);
  };

  const handleShareGuide = (guide: StateGuide) => {
    const content = `${guide.title}\n\n${guide.content}\n\nGenerated by Bailiwick Guides`;
    const card: ShareableCardType = {
      cardId: `card_${Date.now()}`,
      userId: 'current_user',
      timestamp: new Date(),
      type: 'rights',
      content,
      shareUrl: generateShareableUrl(`card_${Date.now()}`)
    };
    setShareableCard(card);
    setSelectedGuide(null);
  };

  const handleRecordingComplete = (recording: Recording) => {
    const content = generateIncidentSummary(recording.location || null, recording.timestamp, recording.notes);
    const card: ShareableCardType = {
      cardId: `incident_${Date.now()}`,
      userId: recording.userId,
      timestamp: recording.timestamp,
      type: 'incident',
      content,
      shareUrl: generateShareableUrl(`incident_${Date.now()}`)
    };
    setShareableCard(card);
  };

  const handleShareCard = (platform: string) => {
    if (!shareableCard) return;
    
    const text = encodeURIComponent(shareableCard.content);
    const url = encodeURIComponent(shareableCard.shareUrl);
    
    switch (platform) {
      case 'sms':
        window.open(`sms:?body=${text}`);
        break;
      case 'twitter':
        window.open(`https://twitter.com/intent/tweet?text=${text}&url=${url}`);
        break;
      case 'whatsapp':
        window.open(`https://wa.me/?text=${text}`);
        break;
      default:
        // Copy to clipboard as fallback
        navigator.clipboard.writeText(shareableCard.content);
        alert('Content copied to clipboard!');
    }
  };

  return (
    <AppShell>
      {/* Hero Section */}
      <div className="text-center py-12 mb-12">
        <h1 className="text-4xl md:text-6xl font-bold text-text-primary mb-4">
          Bailiwick Guides
        </h1>
        <p className="text-xl text-text-secondary mb-6">
          One-page legal monads a your ways to paquer
        </p>
        
        <div className="flex flex-wrap justify-center gap-4 mb-8">
          <div className="flex items-center space-x-2 text-text-secondary">
            <span className="w-2 h-2 bg-accent rounded-full"></span>
            <span className="text-sm">Legislature</span>
          </div>
          <div className="flex items-center space-x-2 text-text-secondary">
            <span className="w-2 h-2 bg-secondary rounded-full"></span>
            <span className="text-sm">Executive</span>
          </div>
          <div className="flex items-center space-x-2 text-text-secondary">
            <span className="w-2 h-2 bg-primary rounded-full"></span>
            <span className="text-sm">Constituent</span>
          </div>
          <div className="flex items-center space-x-2 text-text-secondary">
            <span className="w-2 h-2 bg-pink-500 rounded-full"></span>
            <span className="text-sm">Whole stance</span>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 max-w-6xl mx-auto">
        {/* Left Column - State Selection and Guides */}
        <div className="lg:col-span-2 space-y-6">
          <StateSelector
            selectedState={selectedState}
            onStateSelect={handleStateSelect}
            onDetectLocation={handleDetectLocation}
          />
          
          {/* Guide Categories */}
          <Card>
            <h3 className="text-lg font-semibold text-text-primary mb-4">Legal Guides</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {GUIDE_CATEGORIES.map((category) => (
                <div
                  key={category.id}
                  className="bg-surface rounded-lg p-4 hover:bg-opacity-80 transition-all duration-200 cursor-pointer"
                >
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">{category.icon}</span>
                    <span className="text-text-primary font-medium">{category.name}</span>
                  </div>
                </div>
              ))}
            </div>
          </Card>
          
          {/* Available Guides */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-text-primary">
              Available for {selectedState}
            </h3>
            {availableGuides.map((guide) => (
              <GuideCard
                key={`${guide.stateCode}-${guide.title}`}
                guide={guide}
                onView={handleViewGuide}
                onPurchase={(guide) => console.log('Purchase:', guide)}
              />
            ))}
          </div>
        </div>

        {/* Right Column - Recording and Actions */}
        <div className="space-y-6">
          <RecordButton onRecordingComplete={handleRecordingComplete} />
          
          {/* Quick Actions */}
          <Card>
            <h3 className="text-lg font-semibold text-text-primary mb-4">Quick Actions</h3>
            <div className="space-y-3">
              <Button
                variant="secondary"
                className="w-full justify-start"
                onClick={() => handleViewGuide(availableGuides[0])}
              >
                View Rights Card
              </Button>
              <Button
                variant="secondary"
                className="w-full justify-start"
                onClick={() => {
                  const content = `Emergency Contact Information\n\nGenerated by Bailiwick Guides at ${new Date().toLocaleString()}`;
                  const card: ShareableCardType = {
                    cardId: `emergency_${Date.now()}`,
                    userId: 'current_user',
                    timestamp: new Date(),
                    type: 'incident',
                    content,
                    shareUrl: generateShareableUrl(`emergency_${Date.now()}`)
                  };
                  setShareableCard(card);
                }}
              >
                Share Emergency Info
              </Button>
              <Button
                variant="secondary"
                className="w-full justify-start"
                onClick={() => window.open('tel:911')}
              >
                Call Emergency Services
              </Button>
            </div>
          </Card>
        </div>
      </div>

      {/* Modals */}
      {selectedGuide && (
        <GuideViewer
          guide={selectedGuide}
          onClose={() => setSelectedGuide(null)}
          onShare={handleShareGuide}
        />
      )}

      {shareableCard && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="relative">
            <Button
              variant="iconOnly"
              onClick={() => setShareableCard(null)}
              className="absolute -top-2 -right-2 z-10"
            >
              Ã—
            </Button>
            <ShareableCard
              card={shareableCard}
              onShare={handleShareCard}
            />
          </div>
        </div>
      )}
    </AppShell>
  );
}
